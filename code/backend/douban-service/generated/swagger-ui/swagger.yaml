---
swagger: "2.0"
info:
  description: "Douban Service"
  version: "v1"
  title: "Douban Service"
  contact:
    name: "Yang gen"
    email: "zhull991122@sjtu.edu.cn"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
host: "localhost"
basePath: "/douban"
tags:
- name: "Douban Service Controller"
schemes:
- "http"
paths:
  /douban/delBooks:
    post:
      tags:
      - "Douban Service Controller"
      summary: "delete books"
      description: "Delete Books By user Id"
      operationId: "deleteBooks"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "object"
          additionalProperties:
            type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
        501:
          description: "user Id not exists"
  /douban/delById:
    post:
      tags:
      - "Douban Service Controller"
      summary: "delete one user"
      description: "Delete one douban user By user Id"
      operationId: "deleteById"
      parameters:
      - in: "body"
        name: "userId"
        description: "The user ID of a douban user"
        required: false
        schema:
          type: "object"
          additionalProperties:
            type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
        501:
          description: "user Id not exists"
  /douban/delMovies:
    post:
      tags:
      - "Douban Service Controller"
      summary: "delete movies"
      description: "Delete Books By user Id"
      operationId: "deleteMovies"
      parameters:
      - in: "body"
        name: "body"
        required: false
        schema:
          type: "object"
          additionalProperties:
            type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "object"
        501:
          description: "user Id not exists"
  /douban/getBookStats:
    get:
      tags:
      - "Douban Service Controller"
      summary: "get book statistics"
      description: "Get book Statistics by userID"
      operationId: "getBookStats"
      parameters:
      - name: "userId"
        in: "query"
        description: "The user ID of a douban user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/BookStats"
  /douban/getBooks:
    get:
      tags:
      - "Douban Service Controller"
      summary: "get user's books"
      description: "get douban user's read list By user Id"
      operationId: "getBooks"
      parameters:
      - name: "userId"
        in: "query"
        description: "The user ID of a douban user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
  /douban/getById:
    get:
      tags:
      - "Douban Service Controller"
      summary: "get user info by id"
      description: "Get user info by userID"
      operationId: "getUserById"
      parameters:
      - name: "userId"
        in: "query"
        description: "The user ID of a douban user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/User"
  /douban/getMovieStats:
    get:
      tags:
      - "Douban Service Controller"
      summary: "get movie statistics"
      description: "Get movie Statistics by userID"
      operationId: "getMovieStats"
      parameters:
      - name: "userId"
        in: "query"
        description: "The user ID of a douban user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/MovieStats"
  /douban/getMovies:
    get:
      tags:
      - "Douban Service Controller"
      summary: "get user's movies"
      description: "get douban user's watch list By user Id"
      operationId: "getMovies"
      parameters:
      - name: "userId"
        in: "query"
        description: "The user ID of a douban user"
        required: true
        type: "string"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Movie"
definitions:
  Book:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      author:
        type: "string"
      price:
        type: "string"
      ranking:
        type: "number"
        format: "float"
      hot:
        type: "integer"
        format: "int32"
  BookStats:
    type: "object"
    properties:
      avgPrice:
        type: "number"
        format: "float"
      maxPrice:
        type: "number"
        format: "float"
      maxPriceBook:
        $ref: "#/definitions/Book"
      avgRanking:
        type: "number"
        format: "float"
      maxRanking:
        type: "number"
        format: "float"
      maxRankingBook:
        $ref: "#/definitions/Book"
      avgHot:
        type: "number"
        format: "float"
      maxHot:
        type: "number"
        format: "float"
      maxHotBook:
        $ref: "#/definitions/Book"
      minHot:
        type: "number"
        format: "float"
      minHotBook:
        $ref: "#/definitions/Book"
      allBook:
        type: "integer"
        format: "int32"
      preAuthor:
        type: "string"
  Movie:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "string"
      type:
        type: "string"
      language:
        type: "string"
      ranking:
        type: "number"
        format: "float"
      hot:
        type: "integer"
        format: "int32"
  MovieStats:
    type: "object"
    properties:
      avgRanking:
        type: "number"
        format: "float"
      maxRanking:
        type: "number"
        format: "float"
      maxRankingMovie:
        $ref: "#/definitions/Movie"
      minRanking:
        type: "number"
        format: "float"
      minRankingMovie:
        $ref: "#/definitions/Movie"
      avgHot:
        type: "number"
        format: "float"
      maxHot:
        type: "number"
        format: "float"
      maxHotMovie:
        $ref: "#/definitions/Movie"
      minHot:
        type: "number"
        format: "float"
      minHotMovie:
        $ref: "#/definitions/Movie"
      allMovie:
        type: "integer"
        format: "int32"
      preLanguage:
        type: "string"
      preType:
        type: "string"
  User:
    type: "object"
    properties:
      id:
        type: "string"
      name:
        type: "integer"
        format: "int32"
      follower:
        type: "integer"
        format: "int32"
      comment:
        type: "integer"
        format: "int32"
      book_READ:
        type: "integer"
        format: "int32"
      movie_WISH:
        type: "integer"
        format: "int32"
      following:
        type: "integer"
        format: "int32"
      movie_WATCHED:
        type: "integer"
        format: "int32"
      book_WISH:
        type: "integer"
        format: "int32"
